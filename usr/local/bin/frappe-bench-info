#!/usr/bin/env python3

import subprocess, sys, os, json, argparse, getpass
import pymysql
from tabulate import tabulate
from concurrent.futures import ThreadPoolExecutor

# Ensure dependencies are installed
for pkg in ["pymysql", "tabulate"]:
    try:
        __import__(pkg)
    except ImportError:
        print(f"\033[33m{pkg} not found, installing...\033[0m")
        subprocess.check_call([sys.executable, "-m", "pip", "install", "--break-system-packages", pkg])

# ANSI Colors
CYAN = "\033[96m"
GREEN = "\033[92m"
YELLOW = "\033[93m"
RESET = "\033[0m"


def get_package_version(pkg_name="frappe-bench-info"):
    """Read version from installed Debian package."""
    try:
        result = subprocess.run(
            ["dpkg-query", "-W", "-f", "${Version}", pkg_name],
            stdout=subprocess.PIPE, stderr=subprocess.DEVNULL, text=True
        )
        version = result.stdout.strip()
        return version if version else "unknown"
    except Exception:
        return "unknown"


def get_args():
    parser = argparse.ArgumentParser(description="Frappe Bench Info Tool")
    parser.add_argument('--db_user', default='root', help='MariaDB username (default: root)')
    parser.add_argument('--db_host', default='localhost', help='MariaDB host (default: localhost)')
    parser.add_argument('--start_path', help='Path to start scanning (default: current directory)')
    parser.add_argument('--version', action='store_true', help='Show version and exit')

    args = parser.parse_args()

    # Show version and exit
    if args.version:
        version = get_package_version("frappe-bench-info")  # Match your package name
        print(f"frappe-bench-info v{version}")
        sys.exit(0)

    args.start_path = os.path.abspath(args.start_path or os.getcwd())
    args.db_password = getpass.getpass("Enter MariaDB password: ")
    return args


def is_frappe_bench(path):
    return (
        os.path.exists(os.path.join(path, "Procfile")) and
        os.path.exists(os.path.join(path, "sites")) and
        os.path.exists(os.path.join(path, "apps", "frappe"))
    )


def find_all_benches(start_path):
    """Faster bench finder: uses 'find' if available, else threaded scan."""
    try:
        result = subprocess.run(
            ["find", start_path, "-maxdepth", "4", "-type", "f", "-name", "Procfile"],
            stdout=subprocess.PIPE, text=True, check=True
        )
        benches = []
        for line in result.stdout.strip().split("\n"):
            if not line:
                continue
            bench_path = os.path.dirname(line)
            if os.path.isdir(os.path.join(bench_path, "sites")) and \
               os.path.isdir(os.path.join(bench_path, "apps", "frappe")):
                benches.append(bench_path)
        return benches
    except Exception:
        candidates = []
        for root, dirs, files in os.walk(start_path):
            if "Procfile" in files:
                candidates.append(root)

        with ThreadPoolExecutor(max_workers=8) as executor:
            results = executor.map(is_frappe_bench, candidates)

        return [candidates[i] for i, ok in enumerate(results) if ok]


def get_site_db_mapping(bench_path):
    site_db_map = {}
    sites_path = os.path.join(bench_path, "sites")
    if not os.path.isdir(sites_path):
        return site_db_map

    for site in os.listdir(sites_path):
        config_path = os.path.join(sites_path, site, "site_config.json")
        if os.path.isfile(config_path):
            try:
                with open(config_path) as f:
                    config = json.load(f)
                    db_name = config.get("db_name")
                    if db_name:
                        site_db_map[site] = {
                            "db_name": db_name,
                            "bench": os.path.basename(bench_path),
                            "bench_path": bench_path
                        }
            except Exception as e:
                print(f"{YELLOW}Warning: Error reading {config_path}: {e}{RESET}")
    return site_db_map


def get_all_site_mappings(benches):
    all_sites = {}
    for bench_path in benches:
        all_sites.update(get_site_db_mapping(bench_path))
    return all_sites


def get_db_sizes(db_user, db_password, db_host):
    try:
        conn = pymysql.connect(
            host=db_host,
            user=db_user,
            password=db_password,
            database="information_schema"
        )
    except pymysql.err.OperationalError:
        print(f"\033[91mError: Could not connect to MySQL. Check credentials.\033[0m")
        return {}

    with conn.cursor() as cursor:
        cursor.execute("""
            SELECT table_schema AS db_name,
                   ROUND(SUM(data_length + index_length) / 1024 / 1024, 2) AS size_mb
            FROM tables
            GROUP BY table_schema
        """)
        return dict(cursor.fetchall())


def main():
    args = get_args()
    benches = find_all_benches(args.start_path)
    if not benches:
        print(f"\033[91mNo Frappe benches found in: {args.start_path}\033[0m")
        return

    db_sizes = get_db_sizes(args.db_user, args.db_password, args.db_host)
    if not db_sizes:
        return

    site_map = get_all_site_mappings(benches)

    print("\n")
    print("FRAPPE BENCH INFO TOOL")
    print("══════════════════════")

    table_data = []
    for site, info in site_map.items():
        db = info["db_name"]
        bench = info["bench"]
        bench_path = info["bench_path"]
        size = db_sizes.get(db, 0.0)

        table_data.append([
            CYAN + site + RESET,
            GREEN + bench + RESET,
            YELLOW + db + RESET,
            f"{size:.2f}",
            bench_path
        ])

    headers = [
        CYAN + "Site Name" + RESET,
        GREEN + "Bench Name" + RESET,
        YELLOW + "DB Name" + RESET,
        "DB Size (MB)",
        "Bench Path"
    ]

    print(tabulate(table_data, headers=headers, tablefmt="grid"))


if __name__ == "__main__":
    main()
